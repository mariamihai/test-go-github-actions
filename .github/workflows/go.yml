name: Go

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          check-latest: true
          go-version-file: ./go.mod

      - run: mkdir -p files

      - name: Verify dependencies
        run: go mod verify

      - run: mkdir -p files

      - name: golangci-lint
        run: >
          docker run \
            -v ~/go:/root/go \
            -v golangci-lint-cache:/root/.cache \
            -v $(pwd):/app \
            -w /app \
            golangci/golangci-lint:latest-alpine golangci-lint run --deadline=65s --out-format json ./... > files/golangci-lint.json -v

      - uses: actions/upload-artifact@v3
        with:
          name: golangci-lint.json
          path: files
          if-no-files-found: warn

  test:
    name: Test
    runs-on: ubuntu-latest
    #needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - run: mkdir -p files

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          check-latest: true
          go-version-file: ./go.mod

      - name: Test & Generate Coverage and Report
        run: |
          go test "./..." -coverprofile="files/coverage.out" -covermode=count -json > files/report.json

      - uses: actions/upload-artifact@v3
        with:
          name: coverage.out
          path: files/coverage.out
          if-no-files-found: warn

      - uses: actions/upload-artifact@v3
        with:
          name: report.json
          path: files/report.json
          if-no-files-found: warn

  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: golangci-lint.json
          path: files
          if-no-files-found: warn

      - uses: actions/download-artifact@v3
        with:
          name: coverage.out
          path: files
          if-no-files-found: warn

      - uses: actions/download-artifact@v3
        with:
          name: report.json
          path: files
          if-no-files-found: warn

      - name: Display structure of downloaded files
        run: ls -R

      - name: Path
        run: pwd

      - uses: actions/checkout@v2
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.go.tests.reportPath= files/report.json
            -Dsonar.go.coverage.reportPaths=files/coverage.out
            -Dsonar.go.golangci-lint.reportPaths=files/golangci-lint.json
#            -Dsonar.pullrequest.key=${{ github.event.number }}
#            -Dsonar.pullrequest.branch=${{ github.HEAD_REF }}
#            -Dsonar.pullrequest.base=${{ github.BASE_REF }}
#            -Dsonar.pullrequest.github.repository=${{ github.repository }}

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          check-latest: true
          go-version-file: ./go.mod

      - name: Build
        run: go build ./cmd/abc