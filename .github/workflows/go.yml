name: Go

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          check-latest: true
          go-version-file: ./go.mod

      - name: Verify dependencies
        run: go mod verify

      - run: mkdir -p ./files

      - name: golangci-lint
#        run: >
#          docker run \
#            -v ~/go:/root/go \
#            -v golangci-lint-cache:/root/.cache \
#            -v $(pwd):/app \
#            -w /app \
#            golangci/golangci-lint:latest-alpine golangci-lint run --deadline=65s --out-format json ./... > ./files/golangci-lint.json -v
        run: |
          docker run \
                  -v ~/go:/root/go \
                  -v golangci-lint-cache:/root/.cache \
                  -v $(pwd):/app \
                  -w /app \
                  golangci/golangci-lint:latest-alpine golangci-lint run \
                  --out-format checkstyle >> ./files/golangci-lint.xml
          sed -i 's+<file name="+<file name="go/+g' ./files/golangci-lint.xml
          cat ./files/golangci-lint.xml

#      - name: Create golangci-lint report
#        run: |
#          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.42.1
#          cd go
#          /home/runner/go/bin/golangci-lint run --out-format checkstyle -D deadcode,unused --build-tags=integration --timeout 10m --issues-exit-code 0 ./... > ../report.xml
#          cd ..
#          sed -i 's+<file name="+<file name="go/+g' report.xml
#          cat report.xml

      - uses: actions/upload-artifact@v3
        with:
          name: golangci-lint.xml
          path: ./files
          if-no-files-found: warn

      - name: Display structure of files
        run: ls -R

  test:
    name: Test
    runs-on: ubuntu-latest
    #needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          check-latest: true
          go-version-file: ./go.mod

      - run: mkdir -p ./files

      - name: Test & Generate Coverage and Report
        run: |
          go test "./..." -coverprofile="./files/coverage.out" -covermode=count -json > ./files/report.json

      - uses: actions/upload-artifact@v3
        with:
          name: coverage.out
          path: ./files/coverage.out
          if-no-files-found: warn

      - uses: actions/upload-artifact@v3
        with:
          name: report.json
          path: ./files/report.json
          if-no-files-found: warn

      - name: Display structure of files
        run: ls -R

  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v2
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - uses: actions/download-artifact@v3
        with:
          name: golangci-lint.xml
          path: ./files

      - uses: actions/download-artifact@v3
        with:
          name: coverage.out
          path: ./files

      - uses: actions/download-artifact@v3
        with:
          name: report.json
          path: ./files

      - name: Display structure of downloaded files
        run: ls -R

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.go.tests.reportPath=files/report.json
            -Dsonar.go.coverage.reportPaths=files/coverage.out
            -Dsonar.go.golangci-lint.reportPaths=files/golangci-lint.xml
            -Dsonar.sources=.

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          check-latest: true
          go-version-file: ./go.mod

      - name: Build
        run: go build ./cmd/abc