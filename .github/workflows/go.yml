name: Go

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          check-latest: true
          go-version-file: ./go.mod

      - name: Verify dependencies
        run: go mod verify

      - name: golangci-lint
        run: |
          docker run \
            --rm \
            -v ~/go:/root/go \
            -v golangci-lint-cache:/root/.cache \
            -v $(shell pwd):/app \
            -w /app \
            golangci/golangci-lint:latest-alpine golangci-lint run --deadline=65s  -v
#      - name: golangci-lint
#        uses: golangci/golangci-lint-action@v3
#        with:
#          version: latest
          # golangci-lint run ./... --verbose --no-config --out-format checkstyle > golangci-lint.out

          # Optional: golangci-lint command line arguments.
          # args: --issues-exit-code=0

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true

          # Optional: if set to true then the all caching functionality will be complete disabled,
          #           takes precedence over all other caching options.
          # skip-cache: true

          # Optional: if set to true then the action don't cache or restore ~/go/pkg.
          # skip-pkg-cache: true

          # Optional: if set to true then the action don't cache or restore ~/.cache/go-build.
          # skip-build-cache: true

  test:
    name: Test
    runs-on: ubuntu-latest
    #needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          check-latest: true
          go-version-file: ./go.mod

      - name: Test & Generate Coverage and Report
        run: |
          go test "./..." -coverprofile="coverage.out" -covermode=count -json > report.json

  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          check-latest: true
          go-version-file: ./go.mod

      - name: Build
        run: go build ./cmd/abc